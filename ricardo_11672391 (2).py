# -*- coding: utf-8 -*-
"""Ricardo_11672391.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WR1ObA5TLspKN1PSG9Ta3OLZUOFU8aVF
"""

import numpy as np
from scipy.stats import dirichlet
import matplotlib.pyplot as plt
import time

x = np.array([2, 3, 4])
y = np.array([1, 1, 1])
alpha = x + y
m = len(x)
k = 3000
n = 11524800

start_time = time.time()


def densidade_posterior(theta, alpha):
    return np.prod(theta ** (alpha - 1))


amostragem = dirichlet.rvs(alpha, size=n)
densidades = np.prod(amostragem ** (alpha - 1), axis=1)

densidades_class = np.sort(densidades)

bin_size = n // k
U_v = []
v_pontos = []

for i in range(1, k + 1):
    idx = i * bin_size - 1
    v = densidades_class[idx]
    U = i / k
    v_pontos.append(v)
    U_v.append(U)

def U(v):
    if v <= v_pontos[0]:
        return 0.0
    if v >= v_pontos[-1]:
        return 1.0
    for i in range(1, len(v_pontos)):
        if v < v_pontos[i]:
            v0, v1 = v_pontos[i - 1], v_pontos[i]
            U0, U1 = U_v[i - 1], U_v[i]
            return U0 + (U1 - U0) * (v - v0) / (v1 - v0)


vs = np.linspace(v_pontos[0], v_pontos[-1], 300)
us = [U(v) for v in vs]

plt.plot(vs, us, label='U(v) ~ W(v)', color='blue')
plt.xlabel('v')
plt.ylabel('U(v)')
plt.title('Aproximação da função de verdade W(v)')
plt.grid(True)
plt.legend()
plt.show()

i = 0
while True:
    v_test = v_pontos[0] + i * (v_pontos[-1] - v_pontos[0]) / 10
    u_val = U(v_test)
    print(f"U({i+1}) = {u_val:.5f}")
    if u_val >= 1:
        break
    i += 1


end_time = time.time()
print(f"Tempo total de execução: {end_time - start_time:.2f} segundos")